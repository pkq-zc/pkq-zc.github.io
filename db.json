{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/1.如何创建多线程.md","hash":"61195395eebab233f939cec22c20b631fbb9bfbf","modified":1599734209944},{"_id":"source/_posts/2.Thread中常用方法.md","hash":"6cf9a324f300de481cbb4eaa48f4a2f31e976bd1","modified":1599734323648},{"_id":"source/_posts/3.线程的状态.md","hash":"73c0089e4e4abe29094c1f5d4f784790b7c43414","modified":1599734376877},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1599722953000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1599722953000},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1599722953000},{"_id":"themes/next/.gitignore","hash":"56f3470755c20311ddd30d421b377697a6e5e68b","modified":1599722953000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1599722953000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1599722953000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1599722953000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1599722953000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1599722953000},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1599722953000},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1599722953000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1599722953000},{"_id":"themes/next/_config.yml","hash":"ccd41ed5fc3027f81834c30fe4b67c0dac742dea","modified":1599722953000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1599722953000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1599722953000},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1599722953000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1599722953000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1599722953000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1599722953000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1599722953000},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1599722953000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1599722953000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1599722953000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1599722953000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1599722953000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1599722953000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1599722953000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1599722953000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1599722953000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1599722953000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1599722953000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1599722953000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1599722953000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1599722953000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1599722953000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1599722953000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1599722953000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1599722953000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1599722953000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1599722953000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1599722953000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1599722953000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1599722953000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1599722953000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1599722953000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1599722953000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1599722953000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1599722953000},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1599722953000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1599722953000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1599722953000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1599722953000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1599722953000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1599722953000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1599722953000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1599722953000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1599722953000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1599722953000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1599722953000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1599722953000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1599722953000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1599722953000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1599722953000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1599722953000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1599722953000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1599722953000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1599722953000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1599722953000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1599722953000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1599722953000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1599722953000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1599722953000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1599722953000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1599722953000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1599722953000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1599722953000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1599722953000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1599722953000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1599722953000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1599722953000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1599722953000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1599722953000},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1599722953000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1599722953000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"4369b313cbbeae742cb35f86d23d99d4285f7359","modified":1599722953000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1599722953000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1599722953000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1599722953000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1599722953000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1599722953000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1599722953000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1599722953000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1599722953000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1599722953000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1599722953000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1599722953000},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1599722953000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1599722953000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1599722953000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1599722953000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1599722953000},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1599722953000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1599722953000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1599722953000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1599722953000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1599722953000},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1599722953000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1599722953000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1599722953000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1599722953000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1599722953000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1599722953000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1599722953000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1599722953000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1599722953000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1599722953000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1599722953000},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1599722953000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1599722953000},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1599722953000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1599722953000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1599722953000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1599722953000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1599722953000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1599722953000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1599722953000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1599722953000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1599722953000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1599722953000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1599722953000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1599722953000},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1599722953000},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1599722953000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1599722953000},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1599722953000},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1599722953000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1599722953000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1599722953000},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1599722953000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1599722953000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1599722953000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1599722953000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1599722953000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1599722953000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1599722953000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1599722953000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1599722953000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1599722953000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1599722953000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1599722953000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1599722953000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1599722953000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1599722953000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1599722953000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1599722953000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1599722953000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1599722953000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1599722953000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1599722953000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1599722953000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1599722953000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1599722953000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1599722953000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1599722953000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1599722953000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1599722953000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1599722953000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1599722953000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1599722953000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1599722953000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1599722953000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1599722953000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1599722953000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1599722953000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1599722953000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1599722953000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1599722953000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1599722953000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1599722953000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1599722953000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1599722953000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1599722953000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1599722953000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1599722953000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1599722953000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1599722953000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1599722953000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1599722953000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1599722953000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1599722953000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1599722953000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1599722953000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1599722953000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1599722953000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1599722953000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1599722953000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1599722953000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1599722953000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1599722953000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1599722953000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1599722953000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1599722953000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1599722953000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1599722953000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1599722953000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1599722953000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1599722953000},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1599722953000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1599722953000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1599722953000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1599722953000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1599722953000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1599722953000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1599722953000},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1599722953000},{"_id":"public/archives/index.html","hash":"ddcdf7ccdefafb5894a146d4f14cfd8fc0dfb2ed","modified":1599733048011},{"_id":"public/archives/2020/index.html","hash":"ce2bb1d0ca1d67fe519edf285a4ee9a4f8deaebd","modified":1599733048011},{"_id":"public/archives/2020/09/index.html","hash":"fb9f6bfbb8af2cf624fe59b2addb6fe9687c5935","modified":1599733048011},{"_id":"public/tags/多线程-初级/index.html","hash":"4b83269776f2612fef64259f673b9a1173b575ad","modified":1599733048011},{"_id":"public/2020/09/10/3.线程的状态/index.html","hash":"cccbc49410d11e52bb1eb53d977d636b61357be0","modified":1599733048011},{"_id":"public/2020/09/10/2.Thread中常用方法/index.html","hash":"46cbd69edd69e8c2a5bb83b2626cd482abe77fb5","modified":1599733048011},{"_id":"public/2020/09/10/1.如何创建多线程/index.html","hash":"527d9395a424d6e5eb0b965b5ec49335b179666c","modified":1599733048011},{"_id":"public/index.html","hash":"ccc58b424b9bdb997907be2dd9b337d16a2c45bb","modified":1599733048011},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1599733048011},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1599733048011},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1599733048011},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1599733048011},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1599733048011},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1599733048011},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1599733048011},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1599733048011},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1599733048011},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1599733048011},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1599733048011},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1599733048011},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1599733048011},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1599733048011},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1599733048011},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1599733048011},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1599733048011},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1599733048011},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1599733048011},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1599733048011},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1599733048011},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1599733048011},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1599733048011},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1599733048011},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1599733048011},{"_id":"public/css/main.css","hash":"2beefb1c89524f5708e71822bbc255f3da51f777","modified":1599733048011},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1599733048011},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1599733048011},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1599733048011}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"(一)如何创建多线程","date":"2020-09-10T10:06:05.000Z","_content":"\n## 前言\n\n学习java多线程首先就是要知道如何开启多线程.在java中开启多线程主要有两种方式:\n\n- 继承```Thread```类,然后重写```run```方法\n- 实现```Runnable```接口,实现```run```方法\n\n## 示例代码\n\n```java\npublic class App1 {\n    public static void main(String[] args) {\n        create1();\n        create2();\n    }\n\n    /**\n     * 继承Thread类,重写run方法\n     */\n    public static void create1(){\n        MyThread thread = new MyThread();\n        thread.start();\n    }\n\n    static class MyThread extends Thread{\n        @Override\n        public void run() {\n            System.out.println(\"继承Thread类重写run方法创建线程\");\n        }\n    }\n\n    /**\n     * 实现Runnable接口,实现run方法\n     */\n    public static void create2(){\n        Runnable runnable = new MyRunnable();\n        new Thread(runnable).start();\n    }\n\n    static class MyRunnable implements Runnable{\n\n        @Override\n        public void run() {\n            System.out.println(\"线程Runnable接口创建线程\");\n        }\n    }\n}\n```\n\n需要注意的是,启动线程是调用```start()```方法,而不是```run```方法.```run```方法只是一个普通的实例方法.\n\n## 区别\n\n一个是通过继承```Thread```来创建,另一个是通过实现```Runnable```接口来创建.实际项目开发中,使用```Runnable```这种方式比较多.而且使用这种方式我们可以通过线程池来执行我们的任务,同时java中只允许单继承.所以比较推荐实现```Runnable```接口这种方式.当然具体使用哪种方式,只要能完成任务都行.\n\n","source":"_posts/1.如何创建多线程.md","raw":"---\ntitle: (一)如何创建多线程\ndate: 2020-09-10 18:06:05\ntags: \n    - 多线程\n    - 初级\n---\n\n## 前言\n\n学习java多线程首先就是要知道如何开启多线程.在java中开启多线程主要有两种方式:\n\n- 继承```Thread```类,然后重写```run```方法\n- 实现```Runnable```接口,实现```run```方法\n\n## 示例代码\n\n```java\npublic class App1 {\n    public static void main(String[] args) {\n        create1();\n        create2();\n    }\n\n    /**\n     * 继承Thread类,重写run方法\n     */\n    public static void create1(){\n        MyThread thread = new MyThread();\n        thread.start();\n    }\n\n    static class MyThread extends Thread{\n        @Override\n        public void run() {\n            System.out.println(\"继承Thread类重写run方法创建线程\");\n        }\n    }\n\n    /**\n     * 实现Runnable接口,实现run方法\n     */\n    public static void create2(){\n        Runnable runnable = new MyRunnable();\n        new Thread(runnable).start();\n    }\n\n    static class MyRunnable implements Runnable{\n\n        @Override\n        public void run() {\n            System.out.println(\"线程Runnable接口创建线程\");\n        }\n    }\n}\n```\n\n需要注意的是,启动线程是调用```start()```方法,而不是```run```方法.```run```方法只是一个普通的实例方法.\n\n## 区别\n\n一个是通过继承```Thread```来创建,另一个是通过实现```Runnable```接口来创建.实际项目开发中,使用```Runnable```这种方式比较多.而且使用这种方式我们可以通过线程池来执行我们的任务,同时java中只允许单继承.所以比较推荐实现```Runnable```接口这种方式.当然具体使用哪种方式,只要能完成任务都行.\n\n","slug":"1.如何创建多线程","published":1,"updated":"2020-09-10T10:36:49.944Z","_id":"ckewnr3zv0000pmu6bhk9a7vz","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>学习java多线程首先就是要知道如何开启多线程.在java中开启多线程主要有两种方式:</p>\n<ul>\n<li>继承<code>Thread</code>类,然后重写<code>run</code>方法</li>\n<li>实现<code>Runnable</code>接口,实现<code>run</code>方法</li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        create1();</span><br><span class=\"line\">        create2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 继承Thread类,重写run方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">create1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyThread thread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;继承Thread类重写run方法创建线程&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 实现Runnable接口,实现run方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">create2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> MyRunnable();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(runnable).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程Runnable接口创建线程&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是,启动线程是调用<code>start()</code>方法,而不是<code>run</code>方法.<code>run</code>方法只是一个普通的实例方法.</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>一个是通过继承<code>Thread</code>来创建,另一个是通过实现<code>Runnable</code>接口来创建.实际项目开发中,使用<code>Runnable</code>这种方式比较多.而且使用这种方式我们可以通过线程池来执行我们的任务,同时java中只允许单继承.所以比较推荐实现<code>Runnable</code>接口这种方式.当然具体使用哪种方式,只要能完成任务都行.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>学习java多线程首先就是要知道如何开启多线程.在java中开启多线程主要有两种方式:</p>\n<ul>\n<li>继承<code>Thread</code>类,然后重写<code>run</code>方法</li>\n<li>实现<code>Runnable</code>接口,实现<code>run</code>方法</li>\n</ul>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        create1();</span><br><span class=\"line\">        create2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 继承Thread类,重写run方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">create1</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        MyThread thread = <span class=\"keyword\">new</span> MyThread();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title\">Thread</span></span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;继承Thread类重写run方法创建线程&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 实现Runnable接口,实现run方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">create2</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> MyRunnable();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> Thread(runnable).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title\">Runnable</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程Runnable接口创建线程&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>需要注意的是,启动线程是调用<code>start()</code>方法,而不是<code>run</code>方法.<code>run</code>方法只是一个普通的实例方法.</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>一个是通过继承<code>Thread</code>来创建,另一个是通过实现<code>Runnable</code>接口来创建.实际项目开发中,使用<code>Runnable</code>这种方式比较多.而且使用这种方式我们可以通过线程池来执行我们的任务,同时java中只允许单继承.所以比较推荐实现<code>Runnable</code>接口这种方式.当然具体使用哪种方式,只要能完成任务都行.</p>\n"},{"title":"(二)Thread中常用方法","date":"2020-09-10T10:09:09.000Z","_content":"\n## start&run\n\n需要注意的是,```start()```才是启动线程的方法,而```run```只是普通的一个实例方法.\n\n## sleep&yield\n\n```sleep```可以让```当前调用线程```休眠指定时间,但是并不会丢失任何监视器的所属权(后面的文章会讲到这个,目前暂时知道就行).  \n```yield```它会让```当前调用线程```让出当前持有的cpu资源.简单的说就是本来你持有cpu资源在干活,然后调用了该方法,然后你交出了手里的cpu资源.接下来你和其他所有等待cpu资源的人等待cpu选择,这个时候有可能你会被再次选中.  \n\nsleep和yield方法需要注意的是,它指的是```当前执行的线程```,它是一个静态方法并不是一个实例方法.如果你通过当前实例去执行该方法,该实例线程并不会进入sleep.\n\n```java\npublic class App2 {\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (true){\n                    System.out.println(\"线程执行\");\n                }\n            }\n        });\n        t.setName(\"t1\");\n        t.start();\n        t.sleep(100000);\n    }\n}\n```\n\n线程```t1```并不会进入sleep,会一直打印```线程执行```.这是因为进入sleep的是```mian```线程,并不是```t1```线程.这就是之前说的起作用的是```当前执行线程```.\n\n## join\n\n当前线程等待被调用的实例线程执行完之后再执行.\n\n```java\npublic class App3 {\n    public static void main(String[] args) throws InterruptedException {\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(Thread.currentThread().getName()+\":执行完毕\");\n            }\n        };\n        System.out.println(Thread.currentThread().getName()+\":t1.start()前执行\");\n        Thread t1 = new Thread(runnable);\n        t1.setName(\"t1\");\n        t1.start();\n        //t1.join();\n        System.out.println(Thread.currentThread().getName()+\":t1.start()后执行\");\n    }\n}\n```\n\n上面的代码如果把```t1.join()```注释,它的执行结果可能有下面几种情况:\n\n```java\n//可能的结果1\nmain:t1.start()前执行\nmain:t1.start()后执行\nt1:执行完毕\n//可能的结果2\nmain:t1.start()前执行\nt1:执行完毕\nmain:t1.start()后执行\n//可能的结果3\nmain:t1.start()前执行\nmain:t1.start()后执行\n```\n\n当main线程执行完```t1.start()```之后,main线程并不会关心t1线程是否已经开始执行或者是否已经执行完毕,main线程会继续向下执行.这就造成了上面三种可能的结果.而取消```t1.join()```这句注释再次执行程序,它最后的打印结果只会是```结果2```,这是因为```main线程调用t1.join(),main线程会等待t1线程执行完所有逻辑才会继续执行```,这就是上面说的```当前线程等待被调用的实例线程执行完之后再执行```.这里面的当前线程指的就是```main线程```,而被调用的实例线程就是指```t1线程```.后续文章讲到线程通信wait和notify时会讲join的实现原理.\n\n## setDaemon\n\n设置线程为守护线程,该方法必须是在线程启动前调用才会有效.  \n首先需要了解什么是守护线程.在java中线程一般就是两种:用户线程和守护线程.当jvm只要存在任意一个用户线程,那么守护线程将继续工作下去.如果最后一个用户线程结束执行,那么所有的守护线程将退出执行.守护线程主要为其他线程提供便利服务.例如最典型的就是GC(垃圾回收线程).\n\n```java\npublic class App4 {\n    public static void main(String[] args) throws InterruptedException {\n        Runnable r = new Runnable() {\n            @Override\n            public void run() {\n                while (true){\n                    System.out.println(\"当前时间\"+new Date());\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        };\n\n        Thread t1 = new Thread(null,r,\"t1\");\n        //t1.setDaemon(true);\n        System.out.println(\"系统启动...\");\n        t1.start();\n        Thread.sleep(5000);//用来确保t1线程开始执行\n        System.out.println(\"系统停止...\");\n    }\n}\n```\n\n运行结果如下:\n\n```java\n系统启动...\n当前时间Tue Jun 30 10:17:21 CST 2020\n当前时间Tue Jun 30 10:17:22 CST 2020\n当前时间Tue Jun 30 10:17:23 CST 2020\n当前时间Tue Jun 30 10:17:24 CST 2020\n当前时间Tue Jun 30 10:17:25 CST 2020\n系统停止...\n当前时间Tue Jun 30 10:17:26 CST 2020\n当前时间Tue Jun 30 10:17:27 CST 2020\n```\n\n因为t1不是守护线程,所以当main线程执行结束之后,jvm并不会退出,因为其中还有用户线程在执行.如果取消```t1.setDaemon(true)```,设置t1为守护线程,当main线程执行结束之后t1线程退出会停止打印.  \n需要注意的是设置守护线程必须是在线程未调用start方法前,如果线程已经启动再调用,将会抛出```IllegalThreadStateException```异常.同时还需要注意的一点就是,守护线程创建的线程默认也是守护线程.\n\n```java\npublic class App5 {\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                //打印t1线程事发后是守护线程\n                System.out.println(Thread.currentThread().getName()+\":\"+Thread.currentThread().isDaemon());\n                //在线程1中创建线程2\n                Thread t2 = new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        //打印t2线程事发后是守护线程\n                        System.out.println(Thread.currentThread().getName()+\":\"+Thread.currentThread().isDaemon());\n                    }\n                });\n                t2.setName(\"t2\");\n                t2.start();\n            }\n        });\n        t1.setName(\"t1\");\n        //设置t1线程未守护线程\n        t1.setDaemon(true);\n        t1.start();\n\n        Thread.sleep(2000);\n    }\n}\n```\n\n最后的打印结果如下:\n\n```java\nt1:true\nt2:true\n```\n\n## 总结\n\n上面这些方法都是Thread中比较常用的方法,但是还有部分比较重要的方法,这些将会在后面的文章中有介绍.\n\n","source":"_posts/2.Thread中常用方法.md","raw":"---\ntitle: (二)Thread中常用方法\ndate: 2020-09-10 18:09:09\ntags:\n    - 多线程\n    - 初级\n---\n\n## start&run\n\n需要注意的是,```start()```才是启动线程的方法,而```run```只是普通的一个实例方法.\n\n## sleep&yield\n\n```sleep```可以让```当前调用线程```休眠指定时间,但是并不会丢失任何监视器的所属权(后面的文章会讲到这个,目前暂时知道就行).  \n```yield```它会让```当前调用线程```让出当前持有的cpu资源.简单的说就是本来你持有cpu资源在干活,然后调用了该方法,然后你交出了手里的cpu资源.接下来你和其他所有等待cpu资源的人等待cpu选择,这个时候有可能你会被再次选中.  \n\nsleep和yield方法需要注意的是,它指的是```当前执行的线程```,它是一个静态方法并不是一个实例方法.如果你通过当前实例去执行该方法,该实例线程并不会进入sleep.\n\n```java\npublic class App2 {\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                while (true){\n                    System.out.println(\"线程执行\");\n                }\n            }\n        });\n        t.setName(\"t1\");\n        t.start();\n        t.sleep(100000);\n    }\n}\n```\n\n线程```t1```并不会进入sleep,会一直打印```线程执行```.这是因为进入sleep的是```mian```线程,并不是```t1```线程.这就是之前说的起作用的是```当前执行线程```.\n\n## join\n\n当前线程等待被调用的实例线程执行完之后再执行.\n\n```java\npublic class App3 {\n    public static void main(String[] args) throws InterruptedException {\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(Thread.currentThread().getName()+\":执行完毕\");\n            }\n        };\n        System.out.println(Thread.currentThread().getName()+\":t1.start()前执行\");\n        Thread t1 = new Thread(runnable);\n        t1.setName(\"t1\");\n        t1.start();\n        //t1.join();\n        System.out.println(Thread.currentThread().getName()+\":t1.start()后执行\");\n    }\n}\n```\n\n上面的代码如果把```t1.join()```注释,它的执行结果可能有下面几种情况:\n\n```java\n//可能的结果1\nmain:t1.start()前执行\nmain:t1.start()后执行\nt1:执行完毕\n//可能的结果2\nmain:t1.start()前执行\nt1:执行完毕\nmain:t1.start()后执行\n//可能的结果3\nmain:t1.start()前执行\nmain:t1.start()后执行\n```\n\n当main线程执行完```t1.start()```之后,main线程并不会关心t1线程是否已经开始执行或者是否已经执行完毕,main线程会继续向下执行.这就造成了上面三种可能的结果.而取消```t1.join()```这句注释再次执行程序,它最后的打印结果只会是```结果2```,这是因为```main线程调用t1.join(),main线程会等待t1线程执行完所有逻辑才会继续执行```,这就是上面说的```当前线程等待被调用的实例线程执行完之后再执行```.这里面的当前线程指的就是```main线程```,而被调用的实例线程就是指```t1线程```.后续文章讲到线程通信wait和notify时会讲join的实现原理.\n\n## setDaemon\n\n设置线程为守护线程,该方法必须是在线程启动前调用才会有效.  \n首先需要了解什么是守护线程.在java中线程一般就是两种:用户线程和守护线程.当jvm只要存在任意一个用户线程,那么守护线程将继续工作下去.如果最后一个用户线程结束执行,那么所有的守护线程将退出执行.守护线程主要为其他线程提供便利服务.例如最典型的就是GC(垃圾回收线程).\n\n```java\npublic class App4 {\n    public static void main(String[] args) throws InterruptedException {\n        Runnable r = new Runnable() {\n            @Override\n            public void run() {\n                while (true){\n                    System.out.println(\"当前时间\"+new Date());\n                    try {\n                        Thread.sleep(1000);\n                    } catch (InterruptedException e) {\n                        e.printStackTrace();\n                    }\n                }\n            }\n        };\n\n        Thread t1 = new Thread(null,r,\"t1\");\n        //t1.setDaemon(true);\n        System.out.println(\"系统启动...\");\n        t1.start();\n        Thread.sleep(5000);//用来确保t1线程开始执行\n        System.out.println(\"系统停止...\");\n    }\n}\n```\n\n运行结果如下:\n\n```java\n系统启动...\n当前时间Tue Jun 30 10:17:21 CST 2020\n当前时间Tue Jun 30 10:17:22 CST 2020\n当前时间Tue Jun 30 10:17:23 CST 2020\n当前时间Tue Jun 30 10:17:24 CST 2020\n当前时间Tue Jun 30 10:17:25 CST 2020\n系统停止...\n当前时间Tue Jun 30 10:17:26 CST 2020\n当前时间Tue Jun 30 10:17:27 CST 2020\n```\n\n因为t1不是守护线程,所以当main线程执行结束之后,jvm并不会退出,因为其中还有用户线程在执行.如果取消```t1.setDaemon(true)```,设置t1为守护线程,当main线程执行结束之后t1线程退出会停止打印.  \n需要注意的是设置守护线程必须是在线程未调用start方法前,如果线程已经启动再调用,将会抛出```IllegalThreadStateException```异常.同时还需要注意的一点就是,守护线程创建的线程默认也是守护线程.\n\n```java\npublic class App5 {\n    public static void main(String[] args) throws InterruptedException {\n        Thread t1 = new Thread(new Runnable() {\n            @Override\n            public void run() {\n                //打印t1线程事发后是守护线程\n                System.out.println(Thread.currentThread().getName()+\":\"+Thread.currentThread().isDaemon());\n                //在线程1中创建线程2\n                Thread t2 = new Thread(new Runnable() {\n                    @Override\n                    public void run() {\n                        //打印t2线程事发后是守护线程\n                        System.out.println(Thread.currentThread().getName()+\":\"+Thread.currentThread().isDaemon());\n                    }\n                });\n                t2.setName(\"t2\");\n                t2.start();\n            }\n        });\n        t1.setName(\"t1\");\n        //设置t1线程未守护线程\n        t1.setDaemon(true);\n        t1.start();\n\n        Thread.sleep(2000);\n    }\n}\n```\n\n最后的打印结果如下:\n\n```java\nt1:true\nt2:true\n```\n\n## 总结\n\n上面这些方法都是Thread中比较常用的方法,但是还有部分比较重要的方法,这些将会在后面的文章中有介绍.\n\n","slug":"2.Thread中常用方法","published":1,"updated":"2020-09-10T10:38:43.648Z","_id":"ckewnr4010001pmu61aab140c","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"start-amp-run\"><a href=\"#start-amp-run\" class=\"headerlink\" title=\"start&amp;run\"></a>start&amp;run</h2><p>需要注意的是,<code>start()</code>才是启动线程的方法,而<code>run</code>只是普通的一个实例方法.</p>\n<h2 id=\"sleep-amp-yield\"><a href=\"#sleep-amp-yield\" class=\"headerlink\" title=\"sleep&amp;yield\"></a>sleep&amp;yield</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;yield&#96;&#96;&#96;它会让&#96;&#96;&#96;当前调用线程&#96;&#96;&#96;让出当前持有的cpu资源.简单的说就是本来你持有cpu资源在干活,然后调用了该方法,然后你交出了手里的cpu资源.接下来你和其他所有等待cpu资源的人等待cpu选择,这个时候有可能你会被再次选中.  </span><br><span class=\"line\"></span><br><span class=\"line\">sleep和yield方法需要注意的是,它指的是&#96;&#96;&#96;当前执行的线程&#96;&#96;&#96;,它是一个静态方法并不是一个实例方法.如果你通过当前实例去执行该方法,该实例线程并不会进入sleep.</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;java</span><br><span class=\"line\">public class App2 &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        Thread t &#x3D; new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                while (true)&#123;</span><br><span class=\"line\">                    System.out.println(&quot;线程执行&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t.setName(&quot;t1&quot;);</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        t.sleep(100000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>线程<code>t1</code>并不会进入sleep,会一直打印<code>线程执行</code>.这是因为进入sleep的是<code>mian</code>线程,并不是<code>t1</code>线程.这就是之前说的起作用的是<code>当前执行线程</code>.</p>\n<h2 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h2><p>当前线程等待被调用的实例线程执行完之后再执行.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:执行完毕&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:t1.start()前执行&quot;</span>);</span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(runnable);</span><br><span class=\"line\">        t1.setName(<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        <span class=\"comment\">//t1.join();</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:t1.start()后执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码如果把<code>t1.join()</code>注释,它的执行结果可能有下面几种情况:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可能的结果1</span></span><br><span class=\"line\">main:t1.start()前执行</span><br><span class=\"line\">main:t1.start()后执行</span><br><span class=\"line\">t1:执行完毕</span><br><span class=\"line\"><span class=\"comment\">//可能的结果2</span></span><br><span class=\"line\">main:t1.start()前执行</span><br><span class=\"line\">t1:执行完毕</span><br><span class=\"line\">main:t1.start()后执行</span><br><span class=\"line\"><span class=\"comment\">//可能的结果3</span></span><br><span class=\"line\">main:t1.start()前执行</span><br><span class=\"line\">main:t1.start()后执行</span><br></pre></td></tr></table></figure>\n\n<p>当main线程执行完<code>t1.start()</code>之后,main线程并不会关心t1线程是否已经开始执行或者是否已经执行完毕,main线程会继续向下执行.这就造成了上面三种可能的结果.而取消<code>t1.join()</code>这句注释再次执行程序,它最后的打印结果只会是<code>结果2</code>,这是因为<code>main线程调用t1.join(),main线程会等待t1线程执行完所有逻辑才会继续执行</code>,这就是上面说的<code>当前线程等待被调用的实例线程执行完之后再执行</code>.这里面的当前线程指的就是<code>main线程</code>,而被调用的实例线程就是指<code>t1线程</code>.后续文章讲到线程通信wait和notify时会讲join的实现原理.</p>\n<h2 id=\"setDaemon\"><a href=\"#setDaemon\" class=\"headerlink\" title=\"setDaemon\"></a>setDaemon</h2><p>设置线程为守护线程,该方法必须是在线程启动前调用才会有效.<br>首先需要了解什么是守护线程.在java中线程一般就是两种:用户线程和守护线程.当jvm只要存在任意一个用户线程,那么守护线程将继续工作下去.如果最后一个用户线程结束执行,那么所有的守护线程将退出执行.守护线程主要为其他线程提供便利服务.例如最典型的就是GC(垃圾回收线程).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Runnable r = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;当前时间&quot;</span>+<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">null</span>,r,<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//t1.setDaemon(true);</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;系统启动...&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">5000</span>);<span class=\"comment\">//用来确保t1线程开始执行</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;系统停止...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统启动...</span><br><span class=\"line\">当前时间Tue Jun <span class=\"number\">30</span> <span class=\"number\">10</span>:<span class=\"number\">17</span>:<span class=\"number\">21</span> CST <span class=\"number\">2020</span></span><br><span class=\"line\">当前时间Tue Jun <span class=\"number\">30</span> <span class=\"number\">10</span>:<span class=\"number\">17</span>:<span class=\"number\">22</span> CST <span class=\"number\">2020</span></span><br><span class=\"line\">当前时间Tue Jun <span class=\"number\">30</span> <span class=\"number\">10</span>:<span class=\"number\">17</span>:<span class=\"number\">23</span> CST <span class=\"number\">2020</span></span><br><span class=\"line\">当前时间Tue Jun <span class=\"number\">30</span> <span class=\"number\">10</span>:<span class=\"number\">17</span>:<span class=\"number\">24</span> CST <span class=\"number\">2020</span></span><br><span class=\"line\">当前时间Tue Jun <span class=\"number\">30</span> <span class=\"number\">10</span>:<span class=\"number\">17</span>:<span class=\"number\">25</span> CST <span class=\"number\">2020</span></span><br><span class=\"line\">系统停止...</span><br><span class=\"line\">当前时间Tue Jun <span class=\"number\">30</span> <span class=\"number\">10</span>:<span class=\"number\">17</span>:<span class=\"number\">26</span> CST <span class=\"number\">2020</span></span><br><span class=\"line\">当前时间Tue Jun <span class=\"number\">30</span> <span class=\"number\">10</span>:<span class=\"number\">17</span>:<span class=\"number\">27</span> CST <span class=\"number\">2020</span></span><br></pre></td></tr></table></figure>\n\n<p>因为t1不是守护线程,所以当main线程执行结束之后,jvm并不会退出,因为其中还有用户线程在执行.如果取消<code>t1.setDaemon(true)</code>,设置t1为守护线程,当main线程执行结束之后t1线程退出会停止打印.<br>需要注意的是设置守护线程必须是在线程未调用start方法前,如果线程已经启动再调用,将会抛出<code>IllegalThreadStateException</code>异常.同时还需要注意的一点就是,守护线程创建的线程默认也是守护线程.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//打印t1线程事发后是守护线程</span></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:&quot;</span>+Thread.currentThread().isDaemon());</span><br><span class=\"line\">                <span class=\"comment\">//在线程1中创建线程2</span></span><br><span class=\"line\">                Thread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//打印t2线程事发后是守护线程</span></span><br><span class=\"line\">                        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:&quot;</span>+Thread.currentThread().isDaemon());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                t2.setName(<span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">                t2.start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.setName(<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置t1线程未守护线程</span></span><br><span class=\"line\">        t1.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后的打印结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1:<span class=\"keyword\">true</span></span><br><span class=\"line\">t2:<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面这些方法都是Thread中比较常用的方法,但是还有部分比较重要的方法,这些将会在后面的文章中有介绍.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"start-amp-run\"><a href=\"#start-amp-run\" class=\"headerlink\" title=\"start&amp;run\"></a>start&amp;run</h2><p>需要注意的是,<code>start()</code>才是启动线程的方法,而<code>run</code>只是普通的一个实例方法.</p>\n<h2 id=\"sleep-amp-yield\"><a href=\"#sleep-amp-yield\" class=\"headerlink\" title=\"sleep&amp;yield\"></a>sleep&amp;yield</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#96;&#96;&#96;yield&#96;&#96;&#96;它会让&#96;&#96;&#96;当前调用线程&#96;&#96;&#96;让出当前持有的cpu资源.简单的说就是本来你持有cpu资源在干活,然后调用了该方法,然后你交出了手里的cpu资源.接下来你和其他所有等待cpu资源的人等待cpu选择,这个时候有可能你会被再次选中.  </span><br><span class=\"line\"></span><br><span class=\"line\">sleep和yield方法需要注意的是,它指的是&#96;&#96;&#96;当前执行的线程&#96;&#96;&#96;,它是一个静态方法并不是一个实例方法.如果你通过当前实例去执行该方法,该实例线程并不会进入sleep.</span><br><span class=\"line\"></span><br><span class=\"line\">&#96;&#96;&#96;java</span><br><span class=\"line\">public class App2 &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">        Thread t &#x3D; new Thread(new Runnable() &#123;</span><br><span class=\"line\">            @Override</span><br><span class=\"line\">            public void run() &#123;</span><br><span class=\"line\">                while (true)&#123;</span><br><span class=\"line\">                    System.out.println(&quot;线程执行&quot;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t.setName(&quot;t1&quot;);</span><br><span class=\"line\">        t.start();</span><br><span class=\"line\">        t.sleep(100000);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>线程<code>t1</code>并不会进入sleep,会一直打印<code>线程执行</code>.这是因为进入sleep的是<code>mian</code>线程,并不是<code>t1</code>线程.这就是之前说的起作用的是<code>当前执行线程</code>.</p>\n<h2 id=\"join\"><a href=\"#join\" class=\"headerlink\" title=\"join\"></a>join</h2><p>当前线程等待被调用的实例线程执行完之后再执行.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App3</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Runnable runnable = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:执行完毕&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:t1.start()前执行&quot;</span>);</span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(runnable);</span><br><span class=\"line\">        t1.setName(<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        <span class=\"comment\">//t1.join();</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:t1.start()后执行&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码如果把<code>t1.join()</code>注释,它的执行结果可能有下面几种情况:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可能的结果1</span></span><br><span class=\"line\">main:t1.start()前执行</span><br><span class=\"line\">main:t1.start()后执行</span><br><span class=\"line\">t1:执行完毕</span><br><span class=\"line\"><span class=\"comment\">//可能的结果2</span></span><br><span class=\"line\">main:t1.start()前执行</span><br><span class=\"line\">t1:执行完毕</span><br><span class=\"line\">main:t1.start()后执行</span><br><span class=\"line\"><span class=\"comment\">//可能的结果3</span></span><br><span class=\"line\">main:t1.start()前执行</span><br><span class=\"line\">main:t1.start()后执行</span><br></pre></td></tr></table></figure>\n\n<p>当main线程执行完<code>t1.start()</code>之后,main线程并不会关心t1线程是否已经开始执行或者是否已经执行完毕,main线程会继续向下执行.这就造成了上面三种可能的结果.而取消<code>t1.join()</code>这句注释再次执行程序,它最后的打印结果只会是<code>结果2</code>,这是因为<code>main线程调用t1.join(),main线程会等待t1线程执行完所有逻辑才会继续执行</code>,这就是上面说的<code>当前线程等待被调用的实例线程执行完之后再执行</code>.这里面的当前线程指的就是<code>main线程</code>,而被调用的实例线程就是指<code>t1线程</code>.后续文章讲到线程通信wait和notify时会讲join的实现原理.</p>\n<h2 id=\"setDaemon\"><a href=\"#setDaemon\" class=\"headerlink\" title=\"setDaemon\"></a>setDaemon</h2><p>设置线程为守护线程,该方法必须是在线程启动前调用才会有效.<br>首先需要了解什么是守护线程.在java中线程一般就是两种:用户线程和守护线程.当jvm只要存在任意一个用户线程,那么守护线程将继续工作下去.如果最后一个用户线程结束执行,那么所有的守护线程将退出执行.守护线程主要为其他线程提供便利服务.例如最典型的就是GC(垃圾回收线程).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App4</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Runnable r = <span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;当前时间&quot;</span>+<span class=\"keyword\">new</span> Date());</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">null</span>,r,<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//t1.setDaemon(true);</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;系统启动...&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">5000</span>);<span class=\"comment\">//用来确保t1线程开始执行</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;系统停止...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">系统启动...</span><br><span class=\"line\">当前时间Tue Jun <span class=\"number\">30</span> <span class=\"number\">10</span>:<span class=\"number\">17</span>:<span class=\"number\">21</span> CST <span class=\"number\">2020</span></span><br><span class=\"line\">当前时间Tue Jun <span class=\"number\">30</span> <span class=\"number\">10</span>:<span class=\"number\">17</span>:<span class=\"number\">22</span> CST <span class=\"number\">2020</span></span><br><span class=\"line\">当前时间Tue Jun <span class=\"number\">30</span> <span class=\"number\">10</span>:<span class=\"number\">17</span>:<span class=\"number\">23</span> CST <span class=\"number\">2020</span></span><br><span class=\"line\">当前时间Tue Jun <span class=\"number\">30</span> <span class=\"number\">10</span>:<span class=\"number\">17</span>:<span class=\"number\">24</span> CST <span class=\"number\">2020</span></span><br><span class=\"line\">当前时间Tue Jun <span class=\"number\">30</span> <span class=\"number\">10</span>:<span class=\"number\">17</span>:<span class=\"number\">25</span> CST <span class=\"number\">2020</span></span><br><span class=\"line\">系统停止...</span><br><span class=\"line\">当前时间Tue Jun <span class=\"number\">30</span> <span class=\"number\">10</span>:<span class=\"number\">17</span>:<span class=\"number\">26</span> CST <span class=\"number\">2020</span></span><br><span class=\"line\">当前时间Tue Jun <span class=\"number\">30</span> <span class=\"number\">10</span>:<span class=\"number\">17</span>:<span class=\"number\">27</span> CST <span class=\"number\">2020</span></span><br></pre></td></tr></table></figure>\n\n<p>因为t1不是守护线程,所以当main线程执行结束之后,jvm并不会退出,因为其中还有用户线程在执行.如果取消<code>t1.setDaemon(true)</code>,设置t1为守护线程,当main线程执行结束之后t1线程退出会停止打印.<br>需要注意的是设置守护线程必须是在线程未调用start方法前,如果线程已经启动再调用,将会抛出<code>IllegalThreadStateException</code>异常.同时还需要注意的一点就是,守护线程创建的线程默认也是守护线程.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App5</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//打印t1线程事发后是守护线程</span></span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:&quot;</span>+Thread.currentThread().isDaemon());</span><br><span class=\"line\">                <span class=\"comment\">//在线程1中创建线程2</span></span><br><span class=\"line\">                Thread t2 = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"comment\">//打印t2线程事发后是守护线程</span></span><br><span class=\"line\">                        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:&quot;</span>+Thread.currentThread().isDaemon());</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">                t2.setName(<span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">                t2.start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.setName(<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置t1线程未守护线程</span></span><br><span class=\"line\">        t1.setDaemon(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后的打印结果如下:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1:<span class=\"keyword\">true</span></span><br><span class=\"line\">t2:<span class=\"keyword\">true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>上面这些方法都是Thread中比较常用的方法,但是还有部分比较重要的方法,这些将会在后面的文章中有介绍.</p>\n"},{"title":"(三)线程的状态","date":"2020-09-10T10:11:49.000Z","_content":"\n## 状态\n\n在不同的语言中,线程状态定义有细微的不同,但是都是大同小异.在java中,在```Thread```类中有一个枚举,记载了线程的6个状态.\n\n- ```NEW(初始)```:新创建一个线程,但是还没有调用线程的start()方法.\n- ```RUNNABLE(可运行)```:在java中,把运行running和就绪ready状态都称为RUNABLE状态.在创建完线程后,调用线程的start()方法,线程将进入该状态.该线程在线程池中等待系统调度获取cpu使用权时,就是ready.获取到cpu使用权时,就是running.\n- ```BLOCKED(阻塞)```:线程在等待一个锁而无法进入同步块.\n- ```WAITING(等待)```:一个正在无限等待另一个线程执行一个特别的动的线程就处于该状态.\n- ```TIMED_WAITING(超时等待)```:一个正在限时等待另一个线程执行一个动作的线程处于这一状态.基本上与WAITING一样,只不过多了时限而已.\n- ```TERMINATED(终止)```:已退出的线程处于这种状态.\n\n## 状态变化\n\n![线程状态转换图.jpg](https://i.loli.net/2019/10/28/N4RmcJKCjpVHOrG.jpg)\n\n## BLOCKED(阻塞)\n\n线程何时会进入```BLOCKED```状态呢?总结下来就是线程在等待一个监视锁,这个时候就会进入该状态.例如下面代码:\n\n``` java\npublic class BlockDemo1 {\n    public static void main(String[] args) throws InterruptedException {\n       Counter counter = new Counter();\n        Thread t1 = new Thread(() -> counter.increase());\n        t1.setName(\"线程1\");\n        t1.start();\n        //确保线程1先获取到锁\n        Thread.sleep(1000);\n\n        Thread t2 = new Thread(() -> counter.increase());\n        t2.setName(\"线程2\");\n        t2.start();\n        //确保线程2已经开始运行\n        Thread.sleep(1000);\n        //打印线程2状态\n        System.out.println(\"t2.getState() = \" + t2.getState());\n    }\n}\n\nclass Counter {\n    int number = 0;\n\n    public synchronized void increase(){\n        number++;\n        try {\n            Thread.sleep(5000L);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n上面的示例代码中,线程1先获取到```counter实例锁```,而线程2没有获取到锁,这将引发线程2进入BLOCKED状态.这是一种比较常见的情况.另外还有一种情况,如下代码所示:\n\n``` java\npublic class BlockDemo2 {\n    public static void main(String[] args) throws InterruptedException {\n        Account account = new Account();\n\n        Thread t1 = new Thread(() -> account.get(100));\n        t1.setName(\"取钱线程\");\n        t1.start();\n\n        Thread.sleep(500L);\n\n        Thread t2 = new Thread(() -> account.add(100));\n        t2.setName(\"存钱线程\");\n        t2.start();\n\n        Thread.sleep(500L);\n        //\n        System.out.println(t1.getName()+\":\"+t1.getState());\n\n\n    }\n}\n\nclass Account{\n    private int amount;\n\n    /**\n     * 存入金额\n     * @param cash\n     */\n    public synchronized void add(int cash){\n        System.out.println(Thread.currentThread().getName()+\":准备存钱\");\n        amount = amount + cash;\n        notify();\n        try {\n            //模拟化时间再做一些事\n            Thread.sleep(10000L);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 取钱\n     * @param cash\n     */\n    public synchronized void get(int cash){\n        System.out.println(Thread.currentThread().getName()+\":准备取钱\");\n        while (amount <= cash){\n            try {\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        amount = amount - cash;\n    }\n}\n```\n\n这是第二种导致进入BLOCKED状态的情况.取钱线程先获取到对象锁进入取钱代码块中,由于金额不够,调用wait()等待金额够了再取钱.因为调用wait()失去了对象锁,存钱线程执行.存钱线程存入金额,然后调用了notify(),这个时候取钱线程已唤醒,但是因为存钱线程还未执行完,取钱线程等待锁,所以进入BLOCKED状态.这个就是后面说的```一个处于 blocked 状态的线程正在等待一个监视器锁，在其调用 Object.wait 方法之后，以再次进入一个同步的块或方法```的解释.\n\n## WAITING(等待)\n\n线程进入WAITING状态的情况有很多.常见的有以下几种:\n\n- 当前线程调用对象的wait()方法,在等待另外一个线程调用notify()或者notifyAll()\n- 在一个线程中,另一个线程调用了join()方法,该线程会一直等待另外一个线程执行完.\n- LockSupport.park\n\n代码示例1:当线程1调用wait(),线程1进入WAITING状态.线程2调用notify()唤醒线程1.线程1继续执行.\n\n``` java\npublic class WaitingDemo1 {\n    public static void main(String[] args) throws InterruptedException {\n        Object o = new Object();\n        Thread t1 = new Thread(() -> {\n            synchronized (o){\n                System.out.println(\"线程1开始执行wait()\");\n                try {\n                    o.wait();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(\"线程1执行完成\");\n            }\n        });\n        t1.start();\n        //确保线程1先执行\n        Thread.sleep(100);\n\n        Thread t2 = new Thread(() -> {\n            synchronized (o){\n                System.out.println(\"线程2开始执行\");\n                try {\n                    Thread.sleep(2000L);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(\"线程2调用notify()\");\n                o.notify();\n            }\n        });\n        t2.start();\n\n        System.out.println(\"线程1状态:\"+t1.getState());\n\n    }\n}\n```\n\n示例2:在线程1中,另起一个线程线程2.当线程2未执行完时,线程1的状态始终都是WAITING.\n\n``` java\npublic class WaitingDemo2 {\n    public static void main(String[] args) throws InterruptedException {\n        //  线程1\n        Thread t1 = new Thread(() -> {\n            //线程2\n            Thread t2 = new Thread(() -> {\n                while (true){\n\n                }\n            });\n            t2.setName(\"线程2\");\n            t2.start();\n            try {\n                //线程2调用join\n                t2.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n\n        });\n        t1.setName(\"线程1\");\n        t1.start();\n\n        //确保线程1和线程2已开始运行\n        Thread.sleep(500L);\n        System.out.println(t1.getState());\n    }\n}\n```\n\nblocked往往是因为监视锁无法获取,导致无法进入代码块.而waiting主要用来线程之间的协调,进入waiting一般需要另外一个线程执行notify()或者notifyAll()才能被唤醒.blocked更像是被动阻塞的,而waiting更像是主动阻塞的.\n\n## TIMED_WAITING(超时等待)\n\n大体上与WAITING相似,不同的主要在该状态有超时,如果时间过后,将自动解除该状态.\n\n- Thread.sleep\n- 带时限（timeout）的 Object.wait\n- 带时限（timeout）的 Thread.join\n- LockSupport.parkNanos\n- LockSupport.parkUnti\n\n上述方式都会让线程进入该状态.\n\n进入TIMED_WAITING其中的sleep()方法,单独的线程调用也可,不一定非要其他线程协同.与wait()不同的是,它不需要同步语义.例如一般调用wait()都是在同步代码块中,如果不在会报异常.但是sleep()是不需要的.同时,在调用sleep时,是不会让出锁的,而wait()是会让出锁的.\n","source":"_posts/3.线程的状态.md","raw":"---\ntitle: (三)线程的状态\ndate: 2020-09-10 18:11:49\ntags: \n    - 多线程\n    - 初级\n---\n\n## 状态\n\n在不同的语言中,线程状态定义有细微的不同,但是都是大同小异.在java中,在```Thread```类中有一个枚举,记载了线程的6个状态.\n\n- ```NEW(初始)```:新创建一个线程,但是还没有调用线程的start()方法.\n- ```RUNNABLE(可运行)```:在java中,把运行running和就绪ready状态都称为RUNABLE状态.在创建完线程后,调用线程的start()方法,线程将进入该状态.该线程在线程池中等待系统调度获取cpu使用权时,就是ready.获取到cpu使用权时,就是running.\n- ```BLOCKED(阻塞)```:线程在等待一个锁而无法进入同步块.\n- ```WAITING(等待)```:一个正在无限等待另一个线程执行一个特别的动的线程就处于该状态.\n- ```TIMED_WAITING(超时等待)```:一个正在限时等待另一个线程执行一个动作的线程处于这一状态.基本上与WAITING一样,只不过多了时限而已.\n- ```TERMINATED(终止)```:已退出的线程处于这种状态.\n\n## 状态变化\n\n![线程状态转换图.jpg](https://i.loli.net/2019/10/28/N4RmcJKCjpVHOrG.jpg)\n\n## BLOCKED(阻塞)\n\n线程何时会进入```BLOCKED```状态呢?总结下来就是线程在等待一个监视锁,这个时候就会进入该状态.例如下面代码:\n\n``` java\npublic class BlockDemo1 {\n    public static void main(String[] args) throws InterruptedException {\n       Counter counter = new Counter();\n        Thread t1 = new Thread(() -> counter.increase());\n        t1.setName(\"线程1\");\n        t1.start();\n        //确保线程1先获取到锁\n        Thread.sleep(1000);\n\n        Thread t2 = new Thread(() -> counter.increase());\n        t2.setName(\"线程2\");\n        t2.start();\n        //确保线程2已经开始运行\n        Thread.sleep(1000);\n        //打印线程2状态\n        System.out.println(\"t2.getState() = \" + t2.getState());\n    }\n}\n\nclass Counter {\n    int number = 0;\n\n    public synchronized void increase(){\n        number++;\n        try {\n            Thread.sleep(5000L);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n上面的示例代码中,线程1先获取到```counter实例锁```,而线程2没有获取到锁,这将引发线程2进入BLOCKED状态.这是一种比较常见的情况.另外还有一种情况,如下代码所示:\n\n``` java\npublic class BlockDemo2 {\n    public static void main(String[] args) throws InterruptedException {\n        Account account = new Account();\n\n        Thread t1 = new Thread(() -> account.get(100));\n        t1.setName(\"取钱线程\");\n        t1.start();\n\n        Thread.sleep(500L);\n\n        Thread t2 = new Thread(() -> account.add(100));\n        t2.setName(\"存钱线程\");\n        t2.start();\n\n        Thread.sleep(500L);\n        //\n        System.out.println(t1.getName()+\":\"+t1.getState());\n\n\n    }\n}\n\nclass Account{\n    private int amount;\n\n    /**\n     * 存入金额\n     * @param cash\n     */\n    public synchronized void add(int cash){\n        System.out.println(Thread.currentThread().getName()+\":准备存钱\");\n        amount = amount + cash;\n        notify();\n        try {\n            //模拟化时间再做一些事\n            Thread.sleep(10000L);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 取钱\n     * @param cash\n     */\n    public synchronized void get(int cash){\n        System.out.println(Thread.currentThread().getName()+\":准备取钱\");\n        while (amount <= cash){\n            try {\n                wait();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }\n        amount = amount - cash;\n    }\n}\n```\n\n这是第二种导致进入BLOCKED状态的情况.取钱线程先获取到对象锁进入取钱代码块中,由于金额不够,调用wait()等待金额够了再取钱.因为调用wait()失去了对象锁,存钱线程执行.存钱线程存入金额,然后调用了notify(),这个时候取钱线程已唤醒,但是因为存钱线程还未执行完,取钱线程等待锁,所以进入BLOCKED状态.这个就是后面说的```一个处于 blocked 状态的线程正在等待一个监视器锁，在其调用 Object.wait 方法之后，以再次进入一个同步的块或方法```的解释.\n\n## WAITING(等待)\n\n线程进入WAITING状态的情况有很多.常见的有以下几种:\n\n- 当前线程调用对象的wait()方法,在等待另外一个线程调用notify()或者notifyAll()\n- 在一个线程中,另一个线程调用了join()方法,该线程会一直等待另外一个线程执行完.\n- LockSupport.park\n\n代码示例1:当线程1调用wait(),线程1进入WAITING状态.线程2调用notify()唤醒线程1.线程1继续执行.\n\n``` java\npublic class WaitingDemo1 {\n    public static void main(String[] args) throws InterruptedException {\n        Object o = new Object();\n        Thread t1 = new Thread(() -> {\n            synchronized (o){\n                System.out.println(\"线程1开始执行wait()\");\n                try {\n                    o.wait();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(\"线程1执行完成\");\n            }\n        });\n        t1.start();\n        //确保线程1先执行\n        Thread.sleep(100);\n\n        Thread t2 = new Thread(() -> {\n            synchronized (o){\n                System.out.println(\"线程2开始执行\");\n                try {\n                    Thread.sleep(2000L);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                System.out.println(\"线程2调用notify()\");\n                o.notify();\n            }\n        });\n        t2.start();\n\n        System.out.println(\"线程1状态:\"+t1.getState());\n\n    }\n}\n```\n\n示例2:在线程1中,另起一个线程线程2.当线程2未执行完时,线程1的状态始终都是WAITING.\n\n``` java\npublic class WaitingDemo2 {\n    public static void main(String[] args) throws InterruptedException {\n        //  线程1\n        Thread t1 = new Thread(() -> {\n            //线程2\n            Thread t2 = new Thread(() -> {\n                while (true){\n\n                }\n            });\n            t2.setName(\"线程2\");\n            t2.start();\n            try {\n                //线程2调用join\n                t2.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n\n        });\n        t1.setName(\"线程1\");\n        t1.start();\n\n        //确保线程1和线程2已开始运行\n        Thread.sleep(500L);\n        System.out.println(t1.getState());\n    }\n}\n```\n\nblocked往往是因为监视锁无法获取,导致无法进入代码块.而waiting主要用来线程之间的协调,进入waiting一般需要另外一个线程执行notify()或者notifyAll()才能被唤醒.blocked更像是被动阻塞的,而waiting更像是主动阻塞的.\n\n## TIMED_WAITING(超时等待)\n\n大体上与WAITING相似,不同的主要在该状态有超时,如果时间过后,将自动解除该状态.\n\n- Thread.sleep\n- 带时限（timeout）的 Object.wait\n- 带时限（timeout）的 Thread.join\n- LockSupport.parkNanos\n- LockSupport.parkUnti\n\n上述方式都会让线程进入该状态.\n\n进入TIMED_WAITING其中的sleep()方法,单独的线程调用也可,不一定非要其他线程协同.与wait()不同的是,它不需要同步语义.例如一般调用wait()都是在同步代码块中,如果不在会报异常.但是sleep()是不需要的.同时,在调用sleep时,是不会让出锁的,而wait()是会让出锁的.\n","slug":"3.线程的状态","published":1,"updated":"2020-09-10T10:39:36.877Z","_id":"ckewnr4050003pmu65p109qab","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h2><p>在不同的语言中,线程状态定义有细微的不同,但是都是大同小异.在java中,在<code>Thread</code>类中有一个枚举,记载了线程的6个状态.</p>\n<ul>\n<li><code>NEW(初始)</code>:新创建一个线程,但是还没有调用线程的start()方法.</li>\n<li><code>RUNNABLE(可运行)</code>:在java中,把运行running和就绪ready状态都称为RUNABLE状态.在创建完线程后,调用线程的start()方法,线程将进入该状态.该线程在线程池中等待系统调度获取cpu使用权时,就是ready.获取到cpu使用权时,就是running.</li>\n<li><code>BLOCKED(阻塞)</code>:线程在等待一个锁而无法进入同步块.</li>\n<li><code>WAITING(等待)</code>:一个正在无限等待另一个线程执行一个特别的动的线程就处于该状态.</li>\n<li><code>TIMED_WAITING(超时等待)</code>:一个正在限时等待另一个线程执行一个动作的线程处于这一状态.基本上与WAITING一样,只不过多了时限而已.</li>\n<li><code>TERMINATED(终止)</code>:已退出的线程处于这种状态.</li>\n</ul>\n<h2 id=\"状态变化\"><a href=\"#状态变化\" class=\"headerlink\" title=\"状态变化\"></a>状态变化</h2><p><img src=\"https://i.loli.net/2019/10/28/N4RmcJKCjpVHOrG.jpg\" alt=\"线程状态转换图.jpg\"></p>\n<h2 id=\"BLOCKED-阻塞\"><a href=\"#BLOCKED-阻塞\" class=\"headerlink\" title=\"BLOCKED(阻塞)\"></a>BLOCKED(阻塞)</h2><p>线程何时会进入<code>BLOCKED</code>状态呢?总结下来就是线程在等待一个监视锁,这个时候就会进入该状态.例如下面代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlockDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">       Counter counter = <span class=\"keyword\">new</span> Counter();</span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; counter.increase());</span><br><span class=\"line\">        t1.setName(<span class=\"string\">&quot;线程1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        <span class=\"comment\">//确保线程1先获取到锁</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(() -&gt; counter.increase());</span><br><span class=\"line\">        t2.setName(<span class=\"string\">&quot;线程2&quot;</span>);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        <span class=\"comment\">//确保线程2已经开始运行</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"comment\">//打印线程2状态</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;t2.getState() = &quot;</span> + t2.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> number = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        number++;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">5000L</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的示例代码中,线程1先获取到<code>counter实例锁</code>,而线程2没有获取到锁,这将引发线程2进入BLOCKED状态.这是一种比较常见的情况.另外还有一种情况,如下代码所示:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlockDemo2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Account account = <span class=\"keyword\">new</span> Account();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; account.get(<span class=\"number\">100</span>));</span><br><span class=\"line\">        t1.setName(<span class=\"string\">&quot;取钱线程&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500L</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(() -&gt; account.add(<span class=\"number\">100</span>));</span><br><span class=\"line\">        t2.setName(<span class=\"string\">&quot;存钱线程&quot;</span>);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500L</span>);</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        System.out.println(t1.getName()+<span class=\"string\">&quot;:&quot;</span>+t1.getState());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> amount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存入金额</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cash</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> cash)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:准备存钱&quot;</span>);</span><br><span class=\"line\">        amount = amount + cash;</span><br><span class=\"line\">        notify();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//模拟化时间再做一些事</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">10000L</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取钱</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cash</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> cash)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:准备取钱&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (amount &lt;= cash)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        amount = amount - cash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是第二种导致进入BLOCKED状态的情况.取钱线程先获取到对象锁进入取钱代码块中,由于金额不够,调用wait()等待金额够了再取钱.因为调用wait()失去了对象锁,存钱线程执行.存钱线程存入金额,然后调用了notify(),这个时候取钱线程已唤醒,但是因为存钱线程还未执行完,取钱线程等待锁,所以进入BLOCKED状态.这个就是后面说的<code>一个处于 blocked 状态的线程正在等待一个监视器锁，在其调用 Object.wait 方法之后，以再次进入一个同步的块或方法</code>的解释.</p>\n<h2 id=\"WAITING-等待\"><a href=\"#WAITING-等待\" class=\"headerlink\" title=\"WAITING(等待)\"></a>WAITING(等待)</h2><p>线程进入WAITING状态的情况有很多.常见的有以下几种:</p>\n<ul>\n<li>当前线程调用对象的wait()方法,在等待另外一个线程调用notify()或者notifyAll()</li>\n<li>在一个线程中,另一个线程调用了join()方法,该线程会一直等待另外一个线程执行完.</li>\n<li>LockSupport.park</li>\n</ul>\n<p>代码示例1:当线程1调用wait(),线程1进入WAITING状态.线程2调用notify()唤醒线程1.线程1继续执行.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitingDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Object o = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (o)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程1开始执行wait()&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    o.wait();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程1执行完成&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        <span class=\"comment\">//确保线程1先执行</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (o)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程2开始执行&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">2000L</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程2调用notify()&quot;</span>);</span><br><span class=\"line\">                o.notify();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程1状态:&quot;</span>+t1.getState());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>示例2:在线程1中,另起一个线程线程2.当线程2未执行完时,线程1的状态始终都是WAITING.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitingDemo2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//  线程1</span></span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//线程2</span></span><br><span class=\"line\">            Thread t2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            t2.setName(<span class=\"string\">&quot;线程2&quot;</span>);</span><br><span class=\"line\">            t2.start();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//线程2调用join</span></span><br><span class=\"line\">                t2.join();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.setName(<span class=\"string\">&quot;线程1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//确保线程1和线程2已开始运行</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500L</span>);</span><br><span class=\"line\">        System.out.println(t1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>blocked往往是因为监视锁无法获取,导致无法进入代码块.而waiting主要用来线程之间的协调,进入waiting一般需要另外一个线程执行notify()或者notifyAll()才能被唤醒.blocked更像是被动阻塞的,而waiting更像是主动阻塞的.</p>\n<h2 id=\"TIMED-WAITING-超时等待\"><a href=\"#TIMED-WAITING-超时等待\" class=\"headerlink\" title=\"TIMED_WAITING(超时等待)\"></a>TIMED_WAITING(超时等待)</h2><p>大体上与WAITING相似,不同的主要在该状态有超时,如果时间过后,将自动解除该状态.</p>\n<ul>\n<li>Thread.sleep</li>\n<li>带时限（timeout）的 Object.wait</li>\n<li>带时限（timeout）的 Thread.join</li>\n<li>LockSupport.parkNanos</li>\n<li>LockSupport.parkUnti</li>\n</ul>\n<p>上述方式都会让线程进入该状态.</p>\n<p>进入TIMED_WAITING其中的sleep()方法,单独的线程调用也可,不一定非要其他线程协同.与wait()不同的是,它不需要同步语义.例如一般调用wait()都是在同步代码块中,如果不在会报异常.但是sleep()是不需要的.同时,在调用sleep时,是不会让出锁的,而wait()是会让出锁的.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h2><p>在不同的语言中,线程状态定义有细微的不同,但是都是大同小异.在java中,在<code>Thread</code>类中有一个枚举,记载了线程的6个状态.</p>\n<ul>\n<li><code>NEW(初始)</code>:新创建一个线程,但是还没有调用线程的start()方法.</li>\n<li><code>RUNNABLE(可运行)</code>:在java中,把运行running和就绪ready状态都称为RUNABLE状态.在创建完线程后,调用线程的start()方法,线程将进入该状态.该线程在线程池中等待系统调度获取cpu使用权时,就是ready.获取到cpu使用权时,就是running.</li>\n<li><code>BLOCKED(阻塞)</code>:线程在等待一个锁而无法进入同步块.</li>\n<li><code>WAITING(等待)</code>:一个正在无限等待另一个线程执行一个特别的动的线程就处于该状态.</li>\n<li><code>TIMED_WAITING(超时等待)</code>:一个正在限时等待另一个线程执行一个动作的线程处于这一状态.基本上与WAITING一样,只不过多了时限而已.</li>\n<li><code>TERMINATED(终止)</code>:已退出的线程处于这种状态.</li>\n</ul>\n<h2 id=\"状态变化\"><a href=\"#状态变化\" class=\"headerlink\" title=\"状态变化\"></a>状态变化</h2><p><img src=\"https://i.loli.net/2019/10/28/N4RmcJKCjpVHOrG.jpg\" alt=\"线程状态转换图.jpg\"></p>\n<h2 id=\"BLOCKED-阻塞\"><a href=\"#BLOCKED-阻塞\" class=\"headerlink\" title=\"BLOCKED(阻塞)\"></a>BLOCKED(阻塞)</h2><p>线程何时会进入<code>BLOCKED</code>状态呢?总结下来就是线程在等待一个监视锁,这个时候就会进入该状态.例如下面代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlockDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">       Counter counter = <span class=\"keyword\">new</span> Counter();</span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; counter.increase());</span><br><span class=\"line\">        t1.setName(<span class=\"string\">&quot;线程1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        <span class=\"comment\">//确保线程1先获取到锁</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(() -&gt; counter.increase());</span><br><span class=\"line\">        t2.setName(<span class=\"string\">&quot;线程2&quot;</span>);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">        <span class=\"comment\">//确保线程2已经开始运行</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"comment\">//打印线程2状态</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;t2.getState() = &quot;</span> + t2.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> number = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">increase</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        number++;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">5000L</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的示例代码中,线程1先获取到<code>counter实例锁</code>,而线程2没有获取到锁,这将引发线程2进入BLOCKED状态.这是一种比较常见的情况.另外还有一种情况,如下代码所示:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BlockDemo2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Account account = <span class=\"keyword\">new</span> Account();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; account.get(<span class=\"number\">100</span>));</span><br><span class=\"line\">        t1.setName(<span class=\"string\">&quot;取钱线程&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500L</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(() -&gt; account.add(<span class=\"number\">100</span>));</span><br><span class=\"line\">        t2.setName(<span class=\"string\">&quot;存钱线程&quot;</span>);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500L</span>);</span><br><span class=\"line\">        <span class=\"comment\">//</span></span><br><span class=\"line\">        System.out.println(t1.getName()+<span class=\"string\">&quot;:&quot;</span>+t1.getState());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Account</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> amount;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 存入金额</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cash</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> cash)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:准备存钱&quot;</span>);</span><br><span class=\"line\">        amount = amount + cash;</span><br><span class=\"line\">        notify();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//模拟化时间再做一些事</span></span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">10000L</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 取钱</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cash</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> cash)</span></span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:准备取钱&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (amount &lt;= cash)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                wait();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        amount = amount - cash;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是第二种导致进入BLOCKED状态的情况.取钱线程先获取到对象锁进入取钱代码块中,由于金额不够,调用wait()等待金额够了再取钱.因为调用wait()失去了对象锁,存钱线程执行.存钱线程存入金额,然后调用了notify(),这个时候取钱线程已唤醒,但是因为存钱线程还未执行完,取钱线程等待锁,所以进入BLOCKED状态.这个就是后面说的<code>一个处于 blocked 状态的线程正在等待一个监视器锁，在其调用 Object.wait 方法之后，以再次进入一个同步的块或方法</code>的解释.</p>\n<h2 id=\"WAITING-等待\"><a href=\"#WAITING-等待\" class=\"headerlink\" title=\"WAITING(等待)\"></a>WAITING(等待)</h2><p>线程进入WAITING状态的情况有很多.常见的有以下几种:</p>\n<ul>\n<li>当前线程调用对象的wait()方法,在等待另外一个线程调用notify()或者notifyAll()</li>\n<li>在一个线程中,另一个线程调用了join()方法,该线程会一直等待另外一个线程执行完.</li>\n<li>LockSupport.park</li>\n</ul>\n<p>代码示例1:当线程1调用wait(),线程1进入WAITING状态.线程2调用notify()唤醒线程1.线程1继续执行.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitingDemo1</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        Object o = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (o)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程1开始执行wait()&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    o.wait();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程1执行完成&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        <span class=\"comment\">//确保线程1先执行</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread t2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (o)&#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程2开始执行&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">2000L</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程2调用notify()&quot;</span>);</span><br><span class=\"line\">                o.notify();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程1状态:&quot;</span>+t1.getState());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>示例2:在线程1中,另起一个线程线程2.当线程2未执行完时,线程1的状态始终都是WAITING.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">WaitingDemo2</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//  线程1</span></span><br><span class=\"line\">        Thread t1 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//线程2</span></span><br><span class=\"line\">            Thread t2 = <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"keyword\">true</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            t2.setName(<span class=\"string\">&quot;线程2&quot;</span>);</span><br><span class=\"line\">            t2.start();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//线程2调用join</span></span><br><span class=\"line\">                t2.join();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        t1.setName(<span class=\"string\">&quot;线程1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//确保线程1和线程2已开始运行</span></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">500L</span>);</span><br><span class=\"line\">        System.out.println(t1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>blocked往往是因为监视锁无法获取,导致无法进入代码块.而waiting主要用来线程之间的协调,进入waiting一般需要另外一个线程执行notify()或者notifyAll()才能被唤醒.blocked更像是被动阻塞的,而waiting更像是主动阻塞的.</p>\n<h2 id=\"TIMED-WAITING-超时等待\"><a href=\"#TIMED-WAITING-超时等待\" class=\"headerlink\" title=\"TIMED_WAITING(超时等待)\"></a>TIMED_WAITING(超时等待)</h2><p>大体上与WAITING相似,不同的主要在该状态有超时,如果时间过后,将自动解除该状态.</p>\n<ul>\n<li>Thread.sleep</li>\n<li>带时限（timeout）的 Object.wait</li>\n<li>带时限（timeout）的 Thread.join</li>\n<li>LockSupport.parkNanos</li>\n<li>LockSupport.parkUnti</li>\n</ul>\n<p>上述方式都会让线程进入该状态.</p>\n<p>进入TIMED_WAITING其中的sleep()方法,单独的线程调用也可,不一定非要其他线程协同.与wait()不同的是,它不需要同步语义.例如一般调用wait()都是在同步代码块中,如果不在会报异常.但是sleep()是不需要的.同时,在调用sleep时,是不会让出锁的,而wait()是会让出锁的.</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckewnr3zv0000pmu6bhk9a7vz","tag_id":"ckewofzz900003fu6hbcvdyfp","_id":"ckewofzzb00023fu65by07dcv"},{"post_id":"ckewnr3zv0000pmu6bhk9a7vz","tag_id":"ckewofzza00013fu6ffhlglay","_id":"ckewofzzc00033fu66azk4f90"},{"post_id":"ckewnr4010001pmu61aab140c","tag_id":"ckewofzz900003fu6hbcvdyfp","_id":"ckewoig2400000bu6g6m7ficl"},{"post_id":"ckewnr4010001pmu61aab140c","tag_id":"ckewofzza00013fu6ffhlglay","_id":"ckewoig2400010bu6f2pd7wpk"},{"post_id":"ckewnr4050003pmu65p109qab","tag_id":"ckewofzz900003fu6hbcvdyfp","_id":"ckewojl4t00020bu6dh8w7z44"},{"post_id":"ckewnr4050003pmu65p109qab","tag_id":"ckewofzza00013fu6ffhlglay","_id":"ckewojl4t00030bu6a9zh6h1g"}],"Tag":[{"name":"多线程,初级","_id":"ckewnr4030002pmu6bwu9gli6"},{"name":"多线程","_id":"ckewofzz900003fu6hbcvdyfp"},{"name":"初级","_id":"ckewofzza00013fu6ffhlglay"}]}}